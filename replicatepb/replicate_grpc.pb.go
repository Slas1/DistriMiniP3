// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package replicatepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerCommunicationClient is the client API for ServerCommunication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerCommunicationClient interface {
	JoinCommunication(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	ServerInformationUpdate(ctx context.Context, in *SIUpdateRequest, opts ...grpc.CallOption) (*SIUpdateResponse, error)
	AuctionInformationUpdate(ctx context.Context, in *AIUpdateRequest, opts ...grpc.CallOption) (*AIUpdateResponse, error)
	IsAlive(ctx context.Context, in *Poke, opts ...grpc.CallOption) (*HandSign, error)
}

type serverCommunicationClient struct {
	cc grpc.ClientConnInterface
}

func NewServerCommunicationClient(cc grpc.ClientConnInterface) ServerCommunicationClient {
	return &serverCommunicationClient{cc}
}

func (c *serverCommunicationClient) JoinCommunication(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/replicatepb.ServerCommunication/JoinCommunication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverCommunicationClient) ServerInformationUpdate(ctx context.Context, in *SIUpdateRequest, opts ...grpc.CallOption) (*SIUpdateResponse, error) {
	out := new(SIUpdateResponse)
	err := c.cc.Invoke(ctx, "/replicatepb.ServerCommunication/ServerInformationUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverCommunicationClient) AuctionInformationUpdate(ctx context.Context, in *AIUpdateRequest, opts ...grpc.CallOption) (*AIUpdateResponse, error) {
	out := new(AIUpdateResponse)
	err := c.cc.Invoke(ctx, "/replicatepb.ServerCommunication/AuctionInformationUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverCommunicationClient) IsAlive(ctx context.Context, in *Poke, opts ...grpc.CallOption) (*HandSign, error) {
	out := new(HandSign)
	err := c.cc.Invoke(ctx, "/replicatepb.ServerCommunication/IsAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerCommunicationServer is the server API for ServerCommunication service.
// All implementations must embed UnimplementedServerCommunicationServer
// for forward compatibility
type ServerCommunicationServer interface {
	JoinCommunication(context.Context, *JoinRequest) (*JoinResponse, error)
	ServerInformationUpdate(context.Context, *SIUpdateRequest) (*SIUpdateResponse, error)
	AuctionInformationUpdate(context.Context, *AIUpdateRequest) (*AIUpdateResponse, error)
	IsAlive(context.Context, *Poke) (*HandSign, error)
	mustEmbedUnimplementedServerCommunicationServer()
}

// UnimplementedServerCommunicationServer must be embedded to have forward compatible implementations.
type UnimplementedServerCommunicationServer struct {
}

func (UnimplementedServerCommunicationServer) JoinCommunication(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCommunication not implemented")
}
func (UnimplementedServerCommunicationServer) ServerInformationUpdate(context.Context, *SIUpdateRequest) (*SIUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerInformationUpdate not implemented")
}
func (UnimplementedServerCommunicationServer) AuctionInformationUpdate(context.Context, *AIUpdateRequest) (*AIUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionInformationUpdate not implemented")
}
func (UnimplementedServerCommunicationServer) IsAlive(context.Context, *Poke) (*HandSign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAlive not implemented")
}
func (UnimplementedServerCommunicationServer) mustEmbedUnimplementedServerCommunicationServer() {}

// UnsafeServerCommunicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerCommunicationServer will
// result in compilation errors.
type UnsafeServerCommunicationServer interface {
	mustEmbedUnimplementedServerCommunicationServer()
}

func RegisterServerCommunicationServer(s grpc.ServiceRegistrar, srv ServerCommunicationServer) {
	s.RegisterService(&ServerCommunication_ServiceDesc, srv)
}

func _ServerCommunication_JoinCommunication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerCommunicationServer).JoinCommunication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicatepb.ServerCommunication/JoinCommunication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerCommunicationServer).JoinCommunication(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerCommunication_ServerInformationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SIUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerCommunicationServer).ServerInformationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicatepb.ServerCommunication/ServerInformationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerCommunicationServer).ServerInformationUpdate(ctx, req.(*SIUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerCommunication_AuctionInformationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AIUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerCommunicationServer).AuctionInformationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicatepb.ServerCommunication/AuctionInformationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerCommunicationServer).AuctionInformationUpdate(ctx, req.(*AIUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerCommunication_IsAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Poke)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerCommunicationServer).IsAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicatepb.ServerCommunication/IsAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerCommunicationServer).IsAlive(ctx, req.(*Poke))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerCommunication_ServiceDesc is the grpc.ServiceDesc for ServerCommunication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerCommunication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "replicatepb.ServerCommunication",
	HandlerType: (*ServerCommunicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinCommunication",
			Handler:    _ServerCommunication_JoinCommunication_Handler,
		},
		{
			MethodName: "ServerInformationUpdate",
			Handler:    _ServerCommunication_ServerInformationUpdate_Handler,
		},
		{
			MethodName: "AuctionInformationUpdate",
			Handler:    _ServerCommunication_AuctionInformationUpdate_Handler,
		},
		{
			MethodName: "IsAlive",
			Handler:    _ServerCommunication_IsAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "replicatepb/replicate.proto",
}

// AuctionCommunicationClient is the client API for AuctionCommunication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuctionCommunicationClient interface {
	JoinAuction(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	NewBid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error)
	Result(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*ResultResponse, error)
}

type auctionCommunicationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctionCommunicationClient(cc grpc.ClientConnInterface) AuctionCommunicationClient {
	return &auctionCommunicationClient{cc}
}

func (c *auctionCommunicationClient) JoinAuction(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/replicatepb.AuctionCommunication/JoinAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionCommunicationClient) NewBid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error) {
	out := new(BidResponse)
	err := c.cc.Invoke(ctx, "/replicatepb.AuctionCommunication/NewBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionCommunicationClient) Result(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/replicatepb.AuctionCommunication/Result", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuctionCommunicationServer is the server API for AuctionCommunication service.
// All implementations must embed UnimplementedAuctionCommunicationServer
// for forward compatibility
type AuctionCommunicationServer interface {
	JoinAuction(context.Context, *JoinRequest) (*JoinResponse, error)
	NewBid(context.Context, *BidRequest) (*BidResponse, error)
	Result(context.Context, *ResultRequest) (*ResultResponse, error)
	mustEmbedUnimplementedAuctionCommunicationServer()
}

// UnimplementedAuctionCommunicationServer must be embedded to have forward compatible implementations.
type UnimplementedAuctionCommunicationServer struct {
}

func (UnimplementedAuctionCommunicationServer) JoinAuction(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinAuction not implemented")
}
func (UnimplementedAuctionCommunicationServer) NewBid(context.Context, *BidRequest) (*BidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBid not implemented")
}
func (UnimplementedAuctionCommunicationServer) Result(context.Context, *ResultRequest) (*ResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Result not implemented")
}
func (UnimplementedAuctionCommunicationServer) mustEmbedUnimplementedAuctionCommunicationServer() {}

// UnsafeAuctionCommunicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuctionCommunicationServer will
// result in compilation errors.
type UnsafeAuctionCommunicationServer interface {
	mustEmbedUnimplementedAuctionCommunicationServer()
}

func RegisterAuctionCommunicationServer(s grpc.ServiceRegistrar, srv AuctionCommunicationServer) {
	s.RegisterService(&AuctionCommunication_ServiceDesc, srv)
}

func _AuctionCommunication_JoinAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionCommunicationServer).JoinAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicatepb.AuctionCommunication/JoinAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionCommunicationServer).JoinAuction(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionCommunication_NewBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionCommunicationServer).NewBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicatepb.AuctionCommunication/NewBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionCommunicationServer).NewBid(ctx, req.(*BidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionCommunication_Result_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionCommunicationServer).Result(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/replicatepb.AuctionCommunication/Result",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionCommunicationServer).Result(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuctionCommunication_ServiceDesc is the grpc.ServiceDesc for AuctionCommunication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuctionCommunication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "replicatepb.AuctionCommunication",
	HandlerType: (*AuctionCommunicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinAuction",
			Handler:    _AuctionCommunication_JoinAuction_Handler,
		},
		{
			MethodName: "NewBid",
			Handler:    _AuctionCommunication_NewBid_Handler,
		},
		{
			MethodName: "Result",
			Handler:    _AuctionCommunication_Result_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "replicatepb/replicate.proto",
}
